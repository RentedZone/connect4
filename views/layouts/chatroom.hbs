<div id="game">
    <div id="chatRooms">
        <div id="containRooms">
            <p>Chat rooms:</p>
            {{#each chatrooms}}
                <a href="/chatroom/{{this.[0]}}">
                    <div class="chatroomBox" {{#if (inChatroom ../chatID this.[0])}}style="background-color: #c3c3c3;"{{/if}}>
                        <p><b>{{this.[1]}}</b></p>
                        <p style="font-size:10px">Chat Room: {{this.[0]}}</p>
                    </div>
                </a>
            {{/each}}
        </div>
    </div>
    <div id=messagingParent>
        <div id="messagingChild">
            <h id="roomName"></h>
            <h id="userList"></h>
            <div id="messaging" class="msg"></div>
            <form id="sendContainer">
                <input type="text" id="messageInput" placeholder="Enter message" required autocapitalize="on" autocomplete="off">
                <button type="submit" id="sendButton">Send</button>
            </form>
        </div>
    </div>
</div>

<script>
    const socket = io();
    const user = `{{currentUserPlayer.name}}`;
    const room = `{{chatID}}`;
    const mColour = `{{currentUserPlayer.mColour}}`;
    const oColour = `{{currentUserPlayer.oColour}}`;

    const chatForm = document.getElementById('sendContainer');
    const chatMessages = document.querySelector('.msg');
    const roomName = document.getElementById('roomName');
    const userListChat = document.getElementById('users');

    socket.emit('join-chat', room, user);
    outputRoomName(room);
    socket.emit('get-messages', room, false);
    socket.on('recieve-messages', messages => {
        messages.forEach(message => {
            outputMessage(message);
        });
    });

    socket.on('not-a-member', () => {
        window.location.replace('http://localhost:9999/friends');
    });

    // msg from server
    socket.on('message', message => {
        outputMessage(message);

        // scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    // output message to DOM
    function outputMessage(message) {
        const div = document.createElement('div');
        div.classList.add('msg');
        div.innerHTML = `<b>${message.name} (${message.time})</b><br>${message.message}`;
        if(message.name === "ConnecBot") {
            div.style.backgroundColor = "lightred"
        } else if (message.name === user) {
            div.style.backgroundColor = mColour;
        } else {
            div.style.backgroundColor = oColour;
        }

        document.querySelector('#messaging').appendChild(div);
    }

    // add room name to DOM
    function outputRoomName(room) {
        roomName.innerText = 'Chatting Lobby #' + room;
    }

    // add user to DOM
    function outputUsers(users) {
        if(users) {
            userListChat.innerHTML = `${users.map(user => `<li>${user.name}</li>`).join('')}`;
        }
    }

    chatForm.addEventListener('submit', e => {
        e.preventDefault();

        // get msg text
        const msg = e.target.elements.messageInput.value;

        // send msg to server
        socket.emit('chat-message', msg, user, room);

        // clear input
        e.target.elements.messageInput.value = '';
        e.target.elements.messageInput.focus();
    });

    function show(x){
        let gMenu = document.getElementById(x);
        if (gMenu.style.display === 'block' || gMenu.style.display === 'flex') {
            gMenu.style.display = "none";
        } else {
            gMenu.style.display = "block";
        }
    }
</script>